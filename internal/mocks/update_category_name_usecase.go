// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/v1/handler/category/update_name.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/product_catalog/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateCategoryNameUsecase is a mock of UpdateCategoryNameUsecase interface.
type MockUpdateCategoryNameUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateCategoryNameUsecaseMockRecorder
}

// MockUpdateCategoryNameUsecaseMockRecorder is the mock recorder for MockUpdateCategoryNameUsecase.
type MockUpdateCategoryNameUsecaseMockRecorder struct {
	mock *MockUpdateCategoryNameUsecase
}

// NewMockUpdateCategoryNameUsecase creates a new mock instance.
func NewMockUpdateCategoryNameUsecase(ctrl *gomock.Controller) *MockUpdateCategoryNameUsecase {
	mock := &MockUpdateCategoryNameUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateCategoryNameUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateCategoryNameUsecase) EXPECT() *MockUpdateCategoryNameUsecaseMockRecorder {
	return m.recorder
}

// UpdateName mocks base method.
func (m *MockUpdateCategoryNameUsecase) UpdateName(ctx context.Context, category entity.UpdateCategoryNameDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockUpdateCategoryNameUsecaseMockRecorder) UpdateName(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockUpdateCategoryNameUsecase)(nil).UpdateName), ctx, category)
}
