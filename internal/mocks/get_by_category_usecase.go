// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/v1/handler/product/get_by_category.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/product_catalog/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockGetProductsByCategoryUsecase is a mock of GetProductsByCategoryUsecase interface.
type MockGetProductsByCategoryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetProductsByCategoryUsecaseMockRecorder
}

// MockGetProductsByCategoryUsecaseMockRecorder is the mock recorder for MockGetProductsByCategoryUsecase.
type MockGetProductsByCategoryUsecaseMockRecorder struct {
	mock *MockGetProductsByCategoryUsecase
}

// NewMockGetProductsByCategoryUsecase creates a new mock instance.
func NewMockGetProductsByCategoryUsecase(ctrl *gomock.Controller) *MockGetProductsByCategoryUsecase {
	mock := &MockGetProductsByCategoryUsecase{ctrl: ctrl}
	mock.recorder = &MockGetProductsByCategoryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetProductsByCategoryUsecase) EXPECT() *MockGetProductsByCategoryUsecaseMockRecorder {
	return m.recorder
}

// GetByCategory mocks base method.
func (m *MockGetProductsByCategoryUsecase) GetByCategory(ctx context.Context, categoryID int64) ([]entity.ProductCategoryListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, categoryID)
	ret0, _ := ret[0].([]entity.ProductCategoryListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockGetProductsByCategoryUsecaseMockRecorder) GetByCategory(ctx, categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockGetProductsByCategoryUsecase)(nil).GetByCategory), ctx, categoryID)
}
