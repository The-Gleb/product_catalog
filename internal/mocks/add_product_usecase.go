// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/v1/handler/product/add.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/product_catalog/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockAddProductUsecase is a mock of AddProductUsecase interface.
type MockAddProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAddProductUsecaseMockRecorder
}

// MockAddProductUsecaseMockRecorder is the mock recorder for MockAddProductUsecase.
type MockAddProductUsecaseMockRecorder struct {
	mock *MockAddProductUsecase
}

// NewMockAddProductUsecase creates a new mock instance.
func NewMockAddProductUsecase(ctrl *gomock.Controller) *MockAddProductUsecase {
	mock := &MockAddProductUsecase{ctrl: ctrl}
	mock.recorder = &MockAddProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddProductUsecase) EXPECT() *MockAddProductUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAddProductUsecase) Add(ctx context.Context, product entity.AddProductDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAddProductUsecaseMockRecorder) Add(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddProductUsecase)(nil).Add), ctx, product)
}
