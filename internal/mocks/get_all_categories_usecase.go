// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/v1/handler/category/get_all.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/product_catalog/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockGetAllCategoriesUsecase is a mock of GetAllCategoriesUsecase interface.
type MockGetAllCategoriesUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllCategoriesUsecaseMockRecorder
}

// MockGetAllCategoriesUsecaseMockRecorder is the mock recorder for MockGetAllCategoriesUsecase.
type MockGetAllCategoriesUsecaseMockRecorder struct {
	mock *MockGetAllCategoriesUsecase
}

// NewMockGetAllCategoriesUsecase creates a new mock instance.
func NewMockGetAllCategoriesUsecase(ctrl *gomock.Controller) *MockGetAllCategoriesUsecase {
	mock := &MockGetAllCategoriesUsecase{ctrl: ctrl}
	mock.recorder = &MockGetAllCategoriesUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAllCategoriesUsecase) EXPECT() *MockGetAllCategoriesUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetAllCategoriesUsecase) GetAll(ctx context.Context) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetAllCategoriesUsecaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetAllCategoriesUsecase)(nil).GetAll), ctx)
}
