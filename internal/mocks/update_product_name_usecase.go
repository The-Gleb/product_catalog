// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/http/v1/handler/product/update_name.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/The-Gleb/product_catalog/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateProductNameUsecase is a mock of UpdateProductNameUsecase interface.
type MockUpdateProductNameUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateProductNameUsecaseMockRecorder
}

// MockUpdateProductNameUsecaseMockRecorder is the mock recorder for MockUpdateProductNameUsecase.
type MockUpdateProductNameUsecaseMockRecorder struct {
	mock *MockUpdateProductNameUsecase
}

// NewMockUpdateProductNameUsecase creates a new mock instance.
func NewMockUpdateProductNameUsecase(ctrl *gomock.Controller) *MockUpdateProductNameUsecase {
	mock := &MockUpdateProductNameUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateProductNameUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateProductNameUsecase) EXPECT() *MockUpdateProductNameUsecaseMockRecorder {
	return m.recorder
}

// UpdateName mocks base method.
func (m *MockUpdateProductNameUsecase) UpdateName(ctx context.Context, product entity.UpdateProductNameDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateName", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateName indicates an expected call of UpdateName.
func (mr *MockUpdateProductNameUsecaseMockRecorder) UpdateName(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateName", reflect.TypeOf((*MockUpdateProductNameUsecase)(nil).UpdateName), ctx, product)
}
